
for (int i = 0; i < num_alert_messages; i++)
{
    get_timestamp(currentTimestamp);

    printf("[Base Station] timestamp %s\n", currentTimestamp);
    printf("node %d\n", base_station->alert_messages[i].reporting_node);

    int num_neighbours = base_station->alert_messages[i].num_neighbours;
    int max_nearby_nodes = num_neighbours * 4;

    printf("num alert msg %d\n", num_alert_messages);
    printf("num neighbours %d\n", num_neighbours);

    struct AvailableNodes *available_nodes = malloc(sizeof(struct AvailableNodes));
    strcpy(available_nodes->timestamp, currentTimestamp);
    available_nodes->size = 0;
    available_nodes->nodes = (int *)malloc(max_nearby_nodes * sizeof(int));

    for (int j = 0; j < num_neighbours; j++)
    {

        int neighbouring_node_rank = base_station->alert_messages[i].neighbouring_nodes[j];
        printf("neighbouring node %d ", neighbouring_node_rank);

        if (base_station->node_availabilities[neighbouring_node_rank] == 1)
        {
            int row = base_station->alert_messages[i].neighbouring_nodes_coord[j][0];
            int col = base_station->alert_messages[i].neighbouring_nodes_coord[j][1];

            get_neighbours(base_station, row, col, available_nodes);
        }
    }
    char received_message_buf[2000];
    sprintf(received_message_buf, "REPORT MESSAGE: { timestamp: %s, node size: %d, available nearby nodes: [ ",
            available_nodes->timestamp, available_nodes->size);

    int first_entry = 1;
    for (int i = 0; i < available_nodes->size; i++)
    {

        char node_info[2000];

        if (!first_entry)
        {
            strcat(node_info, ", ");
        }
        else
        {
            first_entry = 0;
        }

        sprintf(node_info, "node %d", available_nodes->nodes[i]);
        strcat(received_message_buf, node_info);
    }

    strcat(received_message_buf, "]} ");
    log_base_station_event(base_station, received_message_buf);

    // MPI_Isend(&available_nodes, 1, MPI_AVAILABLE_NODES, base_station->alert_messages[i].reporting_node + 1, REPORT_TAG, base_station->world_comm, &report_request[i]);

    // log_base_station_event(base_station, received_message_buf);
    free(available_nodes->nodes);
    free(available_nodes);
}